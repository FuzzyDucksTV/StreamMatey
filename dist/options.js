/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!************************!*\
  !*** ./src/options.js ***!
  \************************/
document.addEventListener('DOMContentLoaded', function (event) {
  var features = {
    sentiment: {
      toggle: document.getElementById('sentimentToggle'),
      sensitivity: document.getElementById('sentimentSensitivity'),
      showTopScorers: document.getElementById('showTopScorers'),
      showBottomScorers: document.getElementById('showBottomScorers'),
      leaderboardDuration: document.getElementById('leaderboardDuration')
    },
    toxicity: {
      toggle: document.getElementById('toxicityToggle'),
      message: document.getElementById('toxicityMessage'),
      modNotification: document.getElementById('toxicityModNotification'),
      selfNotification: document.getElementById('toxicitySelfNotification'),
      modMessage: document.getElementById('toxicityModMessage'),
      selfMessage: document.getElementById('toxicitySelfMessage')
    }
  };
  var themeToggle = document.getElementById('themeToggle');
  var twitchLoginButton = document.getElementById('twitchLoginButton');
  var twitchLogoutButton = document.getElementById('twitchLogoutButton');
  function displayError(message) {
    var errorMessageElement = document.getElementById('error-message');
    errorMessageElement.textContent = message;
    errorMessageElement.style.display = 'block';
    setTimeout(function () {
      errorMessageElement.style.display = 'none';
    }, 5000);
  }

  // Function to load preferences
  function loadPreferences() {
    chrome.runtime.sendMessage({
      type: 'loadPreferences'
    }, function (response) {
      if (response.error) {
        console.error('Error loading preferences:', response.error);
        displayError('Error loading preferences: ' + response.error);
      }
      var decryptedPreferences = response.preferences;
      if (preferences) {
        console.log("Preferences loaded");
        // Set the preferences on the options page
        if (decryptedPreferences.darkMode) {
          document.body.classList.add('dark');
          themeToggle.checked = true;
        } else {
          document.body.classList.remove('dark');
          themeToggle.checked = false;
        }
        for (var feature in decryptedPreferences) {
          if (decryptedPreferences[feature].enabled) {
            features[feature].toggle.checked = true;
          } else {
            features[feature].toggle.checked = false;
          }
          for (var option in decryptedPreferences[feature].options) {
            var input = features[feature][option];
            if (input.type === 'checkbox') {
              input.checked = decryptedPreferences[feature].options[option];
            } else if (input.type === 'range') {
              input.value = decryptedPreferences[feature].options[option];
            } else {
              input.value = decryptedPreferences[feature].options[option];
            }
          }
        }
      }
    });
  }

  // Load the user's preferences when the options page starts
  loadPreferences();

  // Function to save preferences
  function savePreferences() {
    var preferences = {
      darkMode: themeToggle.checked
    };
    for (var feature in features) {
      preferences[feature] = {
        enabled: features[feature].toggle.checked,
        options: {}
      };
      for (var option in features[feature]) {
        if (option !== 'toggle') {
          var input = features[feature][option];
          if (input.type === 'checkbox') {
            preferences[feature].options[option] = input.checked;
          } else {
            preferences[feature].options[option] = input.value;
          }
        }
      }
    }

    // Encrypt the preferences using the encryption key
    var unencryptedPreferences = preferences;

    // Send the encrypted preferences to the background script to save
    chrome.runtime.sendMessage({
      type: 'savePreferences',
      preferences: unencryptedPreferences
    }, function (response) {
      if (response.error) {
        console.error('Error saving preferences:', response.error);
        displayError('Error saving preferences: ' + response.error);
      } else {
        console.log('Preferences saved successfully');
      }
    });
  }
  themeToggle.addEventListener('change', function () {
    if (themeToggle.checked) {
      document.body.classList.add('dark');
    } else {
      document.body.classList.remove('dark');
    }
    savePreferences();
  });
  twitchLoginButton.addEventListener('click', function () {
    // Initiate OAuth flow with Twitch via Netlify function
    chrome.runtime.sendMessage({
      type: 'initiateTwitchOAuth'
    });
  });
  for (var feature in features) {
    features[feature].toggle.addEventListener('change', savePreferences);
    for (var option in features[feature]) {
      if (option !== 'toggle') {
        var input = features[feature][option];
        input.addEventListener('input', function () {
          savePreferences();
        });
      }
    }
  }

  //Check if the user is logged in to Twitch
  chrome.runtime.sendMessage({
    type: 'checkTwitchLogin'
  }, function (data) {
    if (data.error) {
      console.error('Error checking Twitch login:', data.error);
      displayError('Error checking Twitch login: ' + data.error);
    } else if (data.loggedIn) {
      // The user is logged in to Twitch
      // Hide the login button and show the logout button
      twitchLoginButton.style.display = 'none';
      var _twitchLogoutButton = document.createElement('button');
      _twitchLogoutButton.innerText = 'Logout from Twitch';
      document.getElementById('twitchAuth').appendChild(_twitchLogoutButton);
      // Add event listener to logout button
      _twitchLogoutButton.addEventListener('click', function () {
        chrome.runtime.sendMessage({
          type: 'removeTwitchAccessToken'
        }, function (data) {
          if (date.error) {
            console.error('Error removing Twitch access token:', data.error);
            displayError('Error removing Twitch access token: ');
          } else {
            twitchLoginButton.style.display = 'block';
            _twitchLogoutButton.remove();
          }
        });
      });
    }
  });

  // Listen for messages from the background script
  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
    if (request.type === 'warning') {
      displayError(request.message);
    } else if (request.type === 'error') {
      displayError(request.message);
    } else if (request.type === 'success') {
      var successMessageElement = document.getElementById('success-message');
      successMessageElement.textContent = request.message;
      successMessageElement.style.display = 'block';
    } else if (request.type === 'preferences') {
      var _preferences = request.preferences;
      if (_preferences) {
        // Decrypt the preferences using the encryption key
        var decryptedPreferences = _preferences;
        if (decryptedPreferences.darkMode) {
          document.body.classList.add('dark');
          themeToggle.checked = true;
        } else {
          document.body.classList.remove('dark');
          themeToggle.checked = false;
        }
        for (var _feature in decryptedPreferences) {
          if (decryptedPreferences[_feature].enabled) {
            features[_feature].toggle.checked = true;
          } else {
            features[_feature].toggle.checked = false;
          }
          for (var _option in decryptedPreferences[_feature].options) {
            var _input = features[_feature][_option];
            if (_input.type === 'checkbox') {
              _input.checked = decryptedPreferences[_feature].options[_option];
            } else if (_input.type === 'range') {
              _input.value = decryptedPreferences[_feature].options[_option];
            } else {
              _input.value = decryptedPreferences[_feature].options[_option];
            }
          }
        }
      }
    } else {
      throw new Error("Unknown message type: ".concat(request.type));
    }
    return true; // Indicate that the response will be sent asynchronously
  });
});

/* enableSentimentAnalysis = preferences.sentiment.enabled;
enableToxicityDetection = preferences.toxicity.enabled;
sentimentSensitivity = preferences.sentiment.options.sensitivity;
toxicityThreshold = preferences.toxicity.options.threshold;
warningMessageToxic = preferences.toxicity.options.warningMessageToxic;
warningMessageNegative = preferences.toxicity.options.warningMessageNegative;
customMessageToxic = preferences.toxicity.options.customMessageToxic;
customMessageNegative = preferences.toxicity.options.customMessageNegative;
warningToxicUser = preferences.toxicity.options.warningToxicUser;
warningNegativeUser = preferences.toxicity.options.warningNegativeUser;
customMessageToxicUser = preferences.toxicity.options.customMessageToxicUser;
customMessageNegativeUser = preferences.toxicity.options.customMessageNegativeUser;
enableDarkMode = preferences.darkMode;
sentimentLeaderboard = preferences.sentiment.options.showLeaderboard;
toxicityLeaderboard = preferences.toxicity.options.showLeaderboard;
sentimentLeaderboardDuration = preferences.sentiment.options.leaderboardDuration;
toxicityLeaderboardDuration = preferences.toxicity.options.leaderboardDuration;
*/
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,