/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!************************!*\
  !*** ./src/options.js ***!
  \************************/
document.addEventListener('DOMContentLoaded', function (event) {
  var features = {
    sentiment: {
      enableSentimentAnalysis: document.getElementById('sentimentToggle'),
      sensitivity: document.getElementById('sentimentSensitivity'),
      showTopScorersToggle: document.getElementById('showTopScorersToggle'),
      showBottomScorersToggle: document.getElementById('showBottomScorersToggle'),
      leaderboardToggle: document.getElementById('leaderboardToggle'),
      showTopScorers: document.getElementById('showTopScorers'),
      showBottomScorers: document.getElementById('showBottomScorers'),
      leaderboardDuration: document.getElementById('leaderboardDuration')
    },
    toxicity: {
      enableToxicityDetection: document.getElementById('toxicityToggle'),
      customMessageToxicUser: document.getElementById('toxicityMessage'),
      modNotificationToggle: document.getElementById('modNotificationToggle'),
      selfNotificationToggle: document.getElementById('toxicitySelfNotificationToggle'),
      modMessage: document.getElementById('toxicityModMessage'),
      selfMessage: document.getElementById('toxicitySelfMessage'),
      toxicityThreshold: document.getElementById('toxicitySensitivity'),
      showTopScorersToggle: document.getElementById('showTopScorersToggle'),
      showBottomScorersToggle: document.getElementById('showBottomScorersToggle'),
      leaderboardToggle: document.getElementById('leaderboardToggle'),
      showTopScorers: document.getElementById('showTopScorers'),
      showBottomScorers: document.getElementById('showBottomScorers'),
      leaderboardDuration: document.getElementById('leaderboardDuration')
    },
    darkMode: {
      darkMode: document.getElementById('darkModeToggle')
    }
  };
  var themeToggle = document.getElementById('darkModeToggle');
  var twitchLoginButton = document.getElementById('twitchLoginButton');
  var twitchLogoutButton = document.getElementById('twitchLogoutButton');
  function displayError(message) {
    var errorMessageElement = document.getElementById('error-message');
    errorMessageElement.textContent = message;
    errorMessageElement.style.display = 'block';
    setTimeout(function () {
      errorMessageElement.style.display = 'none';
    }, 5000);
  }
  var loadPreferences = function loadPreferences() {
    //Send a message to the background script to load the preferences
    chrome.runtime.sendMessage({
      type: 'loadPreferences'
    }, function (response) {
      var preferences = response.preferences;
      if (preferences) {
        console.log("Preferences loaded");
        // Set the preferences on the options page
        if (preferences.darkMode) {
          document.body.classList.add('dark');
          themeToggle.checked = true;
        } else {
          document.body.classList.remove('dark');
          themeToggle.checked = false;
        }
        for (var feature in preferences) {
          if (preferences[feature].enabled) {
            features[feature].toggle.checked = true;
          } else {
            features[feature].toggle.checked = false;
          }
          for (var option in preferences[feature].options) {
            var input = features[feature][option];
            if (input.type === 'checkbox') {
              input.checked = preferences[feature].options[option];
            } else if (input.type === 'range') {
              input.value = preferences[feature].options[option];
            } else {
              input.value = preferences[feature].options[option];
            }
          }
        }
      } else {
        console.error('Error loading preferences');
        displayError('Error loading preferences');
      }
    });
  };
  loadPreferences();

  // Function to save preferences
  var savePreferences = function savePreferences() {
    var preferences = {
      darkMode: themeToggle.checked
    };
    for (var feature in features) {
      preferences[feature] = {
        enabled: features[feature].toggle.checked,
        options: {}
      };
      for (var option in features[feature]) {
        if (option !== 'toggle') {
          var input = features[feature][option];
          if (input.type === 'checkbox') {
            preferences[feature].options[option] = input.checked;
          } else {
            preferences[feature].options[option] = input.value;
          }
        }
      }
    }

    // Encrypt the preferences using the encryption key
    var unencryptedPreferences = preferences;

    // Send the unencrypted preferences to the background script to save
    chrome.runtime.sendMessage({
      type: 'savePreferences',
      preferences: unencryptedPreferences
    }, function (response) {
      if (response.error) {
        console.error('Error saving preferences:', response.error);
        displayError('Error saving preferences: ' + response.error);
      } else {
        console.log('Preferences saved successfully');
      }
    });
  };
  themeToggle.addEventListener('change', function () {
    if (themeToggle.checked) {
      document.body.classList.add('dark');
    } else {
      document.body.classList.remove('dark');
    }
    savePreferences();
  });
  twitchLoginButton.addEventListener('click', function () {
    // Initiate OAuth flow with Twitch via Netlify function
    chrome.runtime.sendMessage({
      type: 'initiateTwitchOAuth',
      clientId: '1'
    }, function (response) {
      if (response.error) {
        console.error('Error initiating Twitch OAuth:', response.error);
        displayError('Error initiating Twitch OAuth: ');
      } else {
        console.log('Twitch OAuth initiated successfully');
      }
    });
  });
  for (var feature in features) {
    features[feature].toggle.addEventListener('change', savePreferences);
    for (var option in features[feature]) {
      if (option !== 'toggle') {
        var input = features[feature][option];
        input.addEventListener('input', function () {
          savePreferences();
        });
      }
    }
  }

  //Check if the user is logged in to Twitch
  chrome.runtime.sendMessage({
    type: 'checkTwitchLogin'
  }, function (data) {
    if (data.error) {
      console.error('Error checking Twitch login:', data.error);
      displayError('Error checking Twitch login: ' + data.error);
    } else if (data.loggedIn) {
      // The user is logged in to Twitch
      // Hide the login button and show the logout button
      twitchLoginButton.style.display = 'none';
      var _twitchLogoutButton = document.createElement('button');
      _twitchLogoutButton.innerText = 'Logout from Twitch';
      document.getElementById('twitchAuth').appendChild(_twitchLogoutButton);
      // Add event listener to logout button
      _twitchLogoutButton.addEventListener('click', function () {
        chrome.runtime.sendMessage({
          type: 'removeTwitchAccessToken'
        }, function (data) {
          if (date.error) {
            console.error('Error removing Twitch access token:', data.error);
            displayError('Error removing Twitch access token: ');
          } else {
            twitchLoginButton.style.display = 'block';
            _twitchLogoutButton.remove();
          }
        });
      });
    }
  });

  // Listen for messages from the background script
  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
    if (request.type === 'warning') {
      displayError(request.message);
    } else if (request.type === 'error') {
      displayError(request.message);
    } else if (request.type === 'preferences') {
      var preferences = request.preferences;
      if (preferences) {
        if (preferences.darkMode) {
          document.body.classList.add('dark');
          themeToggle.checked = true;
        } else {
          document.body.classList.remove('dark');
          themeToggle.checked = false;
        }
        for (var _feature in preferences) {
          if (preferences[_feature].enabled) {
            features[_feature].toggle.checked = true;
          } else {
            features[_feature].toggle.checked = false;
          }
          for (var _option in preferences[_feature].options) {
            var _input = features[_feature][_option];
            if (_input.type === 'checkbox') {
              _input.checked = preferences[_feature].options[_option];
            } else if (_input.type === 'range') {
              _input.value = preferences[_feature].options[_option];
            } else {
              _input.value = preferences[_feature].options[_option];
            }
          }
        }
      }
    } else {
      throw new Error("Unknown message type: ".concat(request.type));
    }
    return true; // Indicate that the response will be sent asynchronously
  });
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,