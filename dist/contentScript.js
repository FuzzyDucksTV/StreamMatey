/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!******************************!*\
  !*** ./src/contentScript.js ***!
  \******************************/
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Variables to store the user's preferences
var enableSentimentAnalysis = true;
var enableToxicityDetection = true;
var sentimentSensitivity = null;
var toxicitySensitivity = null;

// Variables to store the sentiment and toxicity scores
var sentimentScore = null;
var toxicityScore = null;

// Additional options
var sentimentOptions = {};
var toxicityOptions = {};

// Function to get the user's preferences from background.js
function getPreferences() {
  return new Promise(function (resolve, reject) {
    chrome.runtime.sendMessage({
      type: 'getPreferences'
    }, function (response) {
      if (chrome.runtime.lastError) {
        reject(chrome.runtime.lastError);
      } else {
        resolve(response);
      }
    });
  });
}

// function to set preference variables from getPreferences()
function setPreferenceVariables() {
  getPreferences().then(function (preferences) {
    enableSentimentAnalysis = preferences.sentiment.enabled;
    enableToxicityDetection = preferences.toxicity.enabled;
    sentimentSensitivity = preferences.sentiment.options.sensitivity;
    toxicitySensitivity = preferences.toxicity.options.sensitivity;
  })["catch"](function (error) {
    console.error('Error:', error);
    sendWarningToExtUser('Error: ' + error.message);
  });
}

// Function to handle incoming messages
function handleMessage(_x, _x2, _x3) {
  return _handleMessage.apply(this, arguments);
}
function _handleMessage() {
  _handleMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, sender, sendResponse) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.t0 = request.type;
          _context.next = _context.t0 === 'sentimentAnalysis' ? 4 : _context.t0 === 'toxicityDetection' ? 10 : _context.t0 === 'updateLeaderboard' ? 16 : _context.t0 === 'sentimentAnalysisOptions' ? 18 : _context.t0 === 'toxicityDetectionOptions' ? 20 : _context.t0 === 'updateSentimentScore' ? 22 : _context.t0 === 'updateToxicityScore' ? 25 : 27;
          break;
        case 4:
          if (!enableSentimentAnalysis) {
            _context.next = 9;
            break;
          }
          _context.next = 7;
          return getSentimentScore(request.text);
        case 7:
          sentimentScore = _context.sent;
          updateSentimentMeter(sentimentScore);
        case 9:
          return _context.abrupt("break", 30);
        case 10:
          if (!enableToxicityDetection) {
            _context.next = 15;
            break;
          }
          _context.next = 13;
          return getToxicityScore(request.text);
        case 13:
          toxicityScore = _context.sent;
          updateToxicityMeter(toxicityScore);
        case 15:
          return _context.abrupt("break", 30);
        case 16:
          updateLeaderboard(request);
          return _context.abrupt("break", 30);
        case 18:
          sentimentOptions = request.options;
          return _context.abrupt("break", 30);
        case 20:
          toxicityOptions = request.options;
          return _context.abrupt("break", 30);
        case 22:
          sentimentScore = request.SentimentScore;
          //check if the sentiment score is a number
          if (isNaN(sentimentScore)) {
            //if the sentiment score is not a number, set the sentiment score to 0
            sentimentScore = 0;
          } else {
            //if the sentiment score is a number, round the sentiment score to 2 decimal places
            sentimentScore = Math.round(sentimentScore * 100) / 100;
            //update the sentiment score in the HTML
            document.getElementById('sentimentScore').innerHTML = sentimentScore;
            //update the sentiment giger-meter in the HTML
            document.getElementById('gigerMeter').style.width = "".concat(sentimentScore * 100, "%");
          }
          return _context.abrupt("break", 30);
        case 25:
          toxicityScore = request.ToxicityScore;
          //check if the toxicity score is a number
          if (isNaN(toxicityScore)) {
            //if the toxicity score is not a number, set the toxicity score to 0
            toxicityScore = 0;
          } else {
            //if the toxicity score is a number, round the toxicity score to 2 decimal places
            toxicityScore = Math.round(toxicityScore * 100) / 100;
            //update the toxicity score in the HTML
            document.getElementById('toxicityScore').innerHTML = toxicityScore;
            //update the toxicity giger-meter in the HTML
            document.getElementById('toxicityMeter').style.width = "".concat(toxicityScore * 100, "%");
          }
        case 27:
          console.error('Error: Invalid message type received');
          sendWarningToExtUser('Error: Invalid message type received');
          return _context.abrupt("break", 30);
        case 30:
          _context.next = 36;
          break;
        case 32:
          _context.prev = 32;
          _context.t1 = _context["catch"](0);
          console.error('Error:', _context.t1);
          sendWarningToExtUser('Error: ' + _context.t1.message);
        case 36:
          sendResponse({}); // Send an empty response to the sender
        case 37:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 32]]);
  }));
  return _handleMessage.apply(this, arguments);
}
setPreferenceVariables();
// Listen for messages from the background script
chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
  if (request.type === 'updatePreferences') {
    setPreferenceVariables();
  } else {
    handleMessage(request, sender, sendResponse); // Handle other actions
  }

  return true; // Indicate that the response will be sent asynchronously
});

//function to update the sentiment meter
function updateSentimentMeter(sentimentScore) {
  var sentimentMeter = document.getElementById('gigerMeter');
  // Update the sentiment meter
  if (sentimentScore !== null) {
    sentimentMeter.style.width = "".concat(sentimentScore * 100, "%");
  }
}

//function to update the toxicity meter
function updateToxicityMeter(toxicityScore) {
  var toxicityMeter = document.getElementById('toxicityMeter');
  // Update the toxicity meter
  if (toxicityScore !== null) {
    toxicityMeter.style.width = "".concat(toxicityScore * 100, "%");
  }
}

//function to update the leaderboard
function updateLeaderboard(text) {
  //get the leaderboard items
  var leaderboardItems = document.getElementById('leaderboard').getElementsByTagName('li');
  //get the leaderboard items text
  var leaderboardItemsText = [];
  for (var i = 0; i < leaderboardItems.length; i++) {
    leaderboardItemsText.push(leaderboardItems[i].innerHTML);
  }
  //get the leaderboard items names
  var leaderboardItemsNames = [];

  //get the leaderboard items names and scores
  var leaderboardItemsNamesAndScores = [];
  for (var _i = 0; _i < leaderboardItemsText.length; _i++) {
    leaderboardItemsNamesAndScores.push(leaderboardItemsText[_i].split(' '));
  }
  //get the leaderboard items names and scores sorted by score
  var leaderboardItemsNamesAndScoresSortedByScore = leaderboardItemsNamesAndScores.sort(function (a, b) {
    return b[1] - a[1];
  });

  //get the sentiment score
  var sentimentScore = text.sentimentScore;
  //get the toxicity score
  var toxicityScore = text.toxicityScore;
  //get the name
  var name = text.name;
  //get the name and score
  var nameAndScore = [name, sentimentScore];
  //get the name and score sorted by score
  var nameAndScoreSortedByScore = [name, sentimentScore].sort(function (a, b) {
    return b[1] - a[1];
  });

  //if the leaderboard is empty
  if (leaderboardItemsText.length == 0) {
    //add the name and score to the leaderboard
    var li = document.createElement('li');
    li.appendChild(document.createTextNode(name + ' ' + sentimentScore));
    leaderboard.appendChild(li);
  }
  //if the leaderboard is not empty
  else {
    //if the leaderboard is not full
    if (leaderboardItemsText.length < 3) {
      //add the name and score to the leaderboard
      var _li = document.createElement('li');
      _li.appendChild(document.createTextNode(name + ' ' + sentimentScore));
      leaderboard.appendChild(_li);
    }
    //if the leaderboard is full
    else {
      //if the name and score is greater than the lowest score on the leaderboard
      if (nameAndScoreSortedByScore[1] > leaderboardItemsNamesAndScoresSortedByScore[2][1]) {
        //remove the lowest score on the leaderboard
        leaderboard.removeChild(leaderboardItems[2]);
        //add the name and score to the leaderboard
        var _li2 = document.createElement('li');
        _li2.appendChild(document.createTextNode(name + ' ' + sentimentScore));
        leaderboard.appendChild(_li2);
      }
    }
  }
}

// Function to update the sentiment and toxicity meters in the HTML
function updateMeters(sentimentScore, toxicityScore) {
  var sentimentMeter = document.getElementById('gigerMeter');
  var toxicityMeter = document.getElementById('toxicityMeter');

  // Update the sentiment meter
  if (sentimentScore !== null) {
    sentimentMeter.style.width = "".concat(sentimentScore * 100, "%");
  }

  // Update the toxicity meter
  if (toxicityScore !== null) {
    toxicityMeter.style.width = "".concat(toxicityScore * 100, "%");
  }
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,